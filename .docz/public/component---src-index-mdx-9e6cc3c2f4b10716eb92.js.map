{"version":3,"sources":["webpack:///../src/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6OAOaA,G,UAAe,S,+LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,mOAEA,iBAAQ,CACN,GAAM,gBADR,gBAGA,qBAAG,0BAAYC,WAAW,KAAvB,+BACH,2BACA,qBAAG,0BAAYA,WAAW,KAAvB,4BACH,kCAAiB,kBAAIA,WAAW,KAAf,SAAjB,gFACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,sLAEA,qBAAG,0BAAYA,WAAW,KAAvB,wDACH,2BACA,qBAAG,0BAAYA,WAAW,KAAvB,qDACH,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wwCAqCL,iBAAQ,CACN,GAAM,mCADR,mCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0cAoBL,iBAAQ,CACN,GAAM,gCADR,gCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ioCAmCL,iBAAQ,CACN,GAAM,YADR,YAGA,yFAAwE,6BAAGA,WAAW,KAAQ,CAC1F,KAAQ,yBAD4D,SAAxE,yFAGiE,6BAAGA,WAAW,KAAQ,CACnF,KAAQ,kEADqD,QAHjE,6iBAWA,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,yBADR,yBAGA,8KAA6J,kBAAIA,WAAW,KAAf,eAA7J,iEACY,kBAAIA,WAAW,KAAf,iBADZ,8FAEA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,umBAoBL,iBAAQ,CACN,GAAM,+CADR,+CAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+RAeL,iBAAQ,CACN,GAAM,4CADR,4CAGA,iGACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2SAeL,iBAAQ,CACN,GAAM,oCADR,oCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8QAcL,iBAAQ,CACN,GAAM,qCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qKASL,iBAAQ,CACN,GAAM,oBADR,oBAGA,qBAAG,6BAAGA,WAAW,KAAQ,CACrB,KAAQ,6BADT,6BAGH,iBAAQ,CACN,GAAM,uDADR,uDAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kfAqBL,iBAAQ,CACN,GAAM,gCADR,iCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oX,6LAgBTJ,EAAWK,gBAAiB","file":"component---src-index-mdx-9e6cc3c2f4b10716eb92.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/macbook/Documents/react-api-data-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <p>{`Automate calling external APIs and handling response data. Supports any API with JSON responses. Uses Fetch for\nperforming API requests, normalizr for handling response data and redux for storing data.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p><inlineCode parentName=\"p\">{`npm install react-api-data`}</inlineCode></p>\n    <p>{`or`}</p>\n    <p><inlineCode parentName=\"p\">{`yarn add react-api-data`}</inlineCode></p>\n    <p>{`Make sure `}<em parentName=\"p\">{`fetch`}</em>{` is available globally, polyfill it if needed to support older environments.`}</p>\n    <h2 {...{\n      \"id\": \"install-dependencies\"\n    }}>{`Install dependencies`}</h2>\n    <p>{`React-api-data requires the installation of the peer-dependencies react-redux, redux-thunk and normalizr.\nThese can be installed with the following command:`}</p>\n    <p><inlineCode parentName=\"p\">{`npm install redux react-redux redux-thunk normalizr`}</inlineCode></p>\n    <p>{`or`}</p>\n    <p><inlineCode parentName=\"p\">{`yarn add redux react-redux redux-thunk normalizr`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"quick-usage\"\n    }}>{`Quick usage`}</h2>\n    <h3 {...{\n      \"id\": \"config\"\n    }}>{`Config`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { schema } from 'normalizr';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { configureApiData, reducer } from 'react-api-data';\nimport thunk from 'redux-thunk';\n\n// optionally define normalizr response schemas\n\nconst authorSchema = new schema.Entity('Author');\nconst articleSchema = new schema.Entity('Article', {\n    author: authorSchema\n});\n\n// define api endpoints\n\nconst endpointConfig = {\n    getArticle: {\n        url: 'http://www.mocky.io/v2/5a0c203e320000772de9664c?:articleId/:userId',\n        method: 'GET',\n        responseSchema: articleSchema\n    },\n    saveArticle: {\n        url: 'http://www.mocky.io/v2/5a0c203e320000772de9664c?:articleId',\n        method: 'POST',\n        afterSuccess: ({ dispatch, request, getState }) => {\n            // After successful post, invalidate the cache of the getArticle call, so it gets re-triggered.\n            dispatch(invalidateApiDataRequest('getArticle', {articleId: request.params.articleId, userId: getState().userId})); \n        }\n    }\n};\n\n// Configure store and dispatch config before you render components\n\nconst store = createStore(combineReducers({apiData: reducer}), applyMiddleware(thunk));\nstore.dispatch(configureApiData({}, endpointConfig));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bind-api-data-to-your-component\"\n    }}>{`Bind API data to your component`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport { useApiData } from 'react-api-data';\n\nconst Article = (props) => {\n    const article = useApiData('getArticle', { id: props.articleId });\n    return (\n        <>\n            {article.request.networkStatus === 'success' && \n                <div>\n                    <h1>{article.data.title}</h1>\n                    <p>{article.data.body}</p>\n                </div>\n            }\n        </>\n    );\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"post-data-from-you-component\"\n    }}>{`Post data from you component`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, { useState } from 'react';\nimport { useApiData } from 'react-api-data';\n\nconst PostComment = props => {\n    const [comment, setComment] = useState('');\n    const postComment = useApiData('postComment');\n    const { networkStatus } = postComment.request;\n    const onSubmit = () => {\n        postComment.perform({ id: props.articleId }, { comment });\n    };\n    return (\n        <>\n            {networkStatus === 'ready' && (\n                <div>\n                    <input\n                        onChange={event => setComment(event.target.value)}\n                        placeholder=\"Add a comment...\"\n                    />\n                    <button onClick={onSubmit}>Submit</button>\n                </div>\n            )}\n            {networkStatus === 'loading' && <div>Submitting...</div>}\n            {networkStatus === 'failed' && (\n                <div>\n                    Something went wrong.\n                    <button onClick={onSubmit}>Try again</button>\n                </div>\n            )}\n            {networkStatus === 'success' && <div>Submitted!</div>}\n        </>\n    );\n};\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"the-gist\"\n    }}>{`The gist`}</h1>\n    <p>{`Calling external API endpoints and storing response data in your `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org\"\n      }}>{`redux`}</a>{` state can create\nbloat in your code when you have multiple endpoints, especially in `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\"\n      }}>{`CRUD`}</a>{`\napplications. This package is the result of eliminating repetitive code around API calls and centralizing the concerns of\nfetching and storing API data into one single package. It provides an easy to use interface that aims to minimize the\namount of code needed to use data from external APIs, while maintaining maximum flexibility to support any non-standard\nAPI. The idea is that you can just bind data from a given API endpoint to your component, react-api-data takes care of\nfetching the data if needed, and binding the data to your component.`}</p>\n    <h1 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h1>\n    <h2 {...{\n      \"id\": \"caching-api-responses\"\n    }}>{`Caching API responses`}</h2>\n    <p>{`Responses from successful API calls will be kept in memory so the same call won't be re-triggered a second time. This is especially useful when using `}<em parentName=\"p\">{`withApiData`}</em>{` for the same endpoint on multiple components.\nYou can set a `}<em parentName=\"p\">{`cacheDuration`}</em>{` to specify how long the response is considered valid, or to disable the caching entirely.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n    getArticle: {\n        url: 'http://www.mocky.io/v2/5a0c203e320000772de9664c?:articleId/:userId',\n        method: 'GET',\n        cacheDuration: 60000, // 1 minute\n    },\n    getComments: {\n        url: 'http://www.mocky.io/v2/5a0c203e320000772de9664c?:articleId',\n        method: 'GET',\n        cacheDuration: 0, // no caching, use with caution. Preferably set to a low value to prevent multiple simultaneous calls.\n    },\n    getPosts: {\n        url: 'http://www.mocky.io/v2/5a0c203e320000772de9664c?:articleId',\n        method: 'GET'\n        // Infinite caching\n    },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"manually-clearing-cache-from-your-component\"\n    }}>{`Manually clearing cache from your component`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useApiData } from 'react-api-data';\n\nconst Articles = props => {\n    const getArticles = useApiData('getArticles');\n    return (\n        <>\n            {/* ... */}\n            <button onClick={getArticles.invalidateCache}>Refresh</button>\n        </>\n    );\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"manually-clearing-cache-using-useactions\"\n    }}>{`Manually clearing cache using useActions`}</h2>\n    <p>{`Using the useActions api to invalidate the cache of a specific endpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useActions} from 'react-api-data';\n\nconst Articles = props => {\n    const actions = useActions();\n    return (\n        <>\n            {/* ... */}\n            <button onClick={() => actions.invalidateCache('getArticle', {id: '1234'})}>Refresh</button>\n        </>\n    );\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-api-data-from-the-store\"\n    }}>{`Removing api data from the store`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useActions} from 'react-api-data';\n\nconst LogoutComponent = props => {\n    const actions = useActions();\n    return (\n        <>\n            {/* ... */}\n            <button onClick={() => actions.purgeAll()}>Logout</button>\n        </>\n    );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"including-cookies-in-your-request\"\n    }}>{`Including Cookies in your Request`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const globalConfig = {\n    setRequestProperties: (defaultProperties) => ({\n        ...defaultProperties,\n        credentials: 'include',\n    })\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"uploading-a-file\"\n    }}>{`Uploading a file`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"./example.file-upload.md\"\n      }}>{`See file Upload examples`}</a></p>\n    <h2 {...{\n      \"id\": \"make-multiple-requests-to-the-same-endpoint-at-once\"\n    }}>{`Make multiple requests to the same endpoint at once`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const connectApiData = withApiData({\n    items: 'getItemsInList'\n}, (ownProps, state) => ({\n    items: [{listId: 1}, {listId: 2}, {listId: 3}]\n}));\n\nconst ItemsList = (props) => {\n    if (props.items.every(item => item.request.networkStatus === 'success')) {\n        return (\n            <ul>\n                {props.items.map(item => (<li>{item.data.title}</li>))}\n            </ul>\n        );\n    }\n    return <p>Loading...</p>;\n}\n\nexport default connectApiData(ItemsList);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configure-with-redux-persist\"\n    }}>{`Configure with Redux-persist:`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    \n    // Use the callback of redux-persist to dispatch the afterRehydrate function.\n    // This will make sure all loading states are properly reset.\n    const persistor = persistStore(store, {}, () => store.dispatch(afterRehydrate()));\n    store.dispatch(configureApiData({}, endpointConfig));\n    return {\n        store,\n        persistor,\n    };\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}